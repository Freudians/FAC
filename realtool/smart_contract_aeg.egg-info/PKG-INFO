Metadata-Version: 2.1
Name: smart-contract-aeg
Version: 0.0.1
Summary: Automatic Exploit Generation for smart contracts
Requires-Python: >=3.10
Description-Content-Type: text/markdown

# Smart Contract AEG

A tool to automatically generate access control exploits for smart contracts.

## Requirements

Foundry (https://github.com/foundry-rs/foundry/blob/master/forge/README.md) must be installed for the tool to work, as forge is used
to build and test smart contracts. 

## Usage

```
smart_contract_aeg <insert path to smart contract>
```

The program will repeatedly generate exploits and then test them against the supplied smart contract. If the exploit works(doesn't revert),
then the program writes the source code of the exploit to "exploit.sol" in the current directory. If the exploit fails, then the program
generates another exploit and tries again.

The testing functionality doesn't really work. If you want the tool to generate an exploit without testing and revising it, include the flag
--no_revise. 

## Current Limitations

The program can currently only generate exploits against one smart contract. It cannot exploit vulnerabilities in ecosystems that rely on multiple
smart contracts working in synergy. In addition, the program can only exploits vulnerabilities that lead to a breakdown in access control.
This is still very much a work-in-progress.
A couple of test contracts have been added in the tests directory. Most of them are very, very simple. The tool currently works against a few
of the test contracts, while it fails to generate valid exploits for others. 

## Future directions

The tool is still very basic, and quite limited. There are a lot of improvements that I'd like to make to this tool so that it can generate
exploits against actual smart contracts currently deployed on the blockchain:
- Be able to automatically deploy complex, multi-contract ecosystems for testing. The tool doesn't really know how to deploy smart contracts
that require constructor arguments, or that depend on other smart contracts. A single prompt is currently used to generate the entire exploit.
Optimally, I'd break it up into a prompt to generate a setup function(that deploys the smart contract for testing) and another prompt that
instructs GPT-3 to write the actual exploit.
- Fix the testing and exploit revision aspect of the tool. GPT-3 doesn't seem to heed the feedback that is given to it when the exploit
fails. Furthermore, there are a lot of "false negatives" when testing, where the exploit that GPT-3 generates has the right idea about
how to break the access control of the target(it calls the correct/vulnerable functions), but the exploit reverts because of an unrelated issue.
- Be able to interact with the broader DeFi ecosystem(including money markets, flash loans, common tokens, etc.) to generate successful exploits
against smart contracts that rely on interactions with the otuside world
- Start generating exploits that target other (more interesting) vulnerabilities! I'd love to try getting GPT-3 to exploit more general 
access control vulnerabilities, where a critical function is left unguarded.
